#!/usr/bin/env python3
"""
Setup script for AI Discussion Manager
Helps users configure their environment and get started quickly.
"""

import os
import sys
from dotenv import load_dotenv

def create_env_file():
    """Create or update .env file with user input"""
    print("🚀 AI Discussion Manager Setup")
    print("=" * 50)

    # Check if .env already exists
    if os.path.exists('.env'):
        print("📄 Existing .env file found!")
        response = input("Do you want to update it? (y/n): ").lower().strip()
        if response != 'y':
            print("✅ Setup cancelled. Using existing configuration.")
            return True

    print("\n🔧 Let's configure your environment:")
    print("(Press Enter to use default values)")

    # Get user input for configuration
    print("\n1. Database Configuration:")
    db_host = input("   MySQL Host (localhost): ").strip() or "localhost"
    db_user = input("   MySQL Username (root): ").strip() or "root"
    db_password = input("   MySQL Password: ").strip()
    db_name = input("   Database Name (ai_discussion_manager): ").strip() or "ai_discussion_manager"
    db_port = input("   MySQL Port (3306): ").strip() or "3306"

    print("\n2. OpenAI Configuration:")
    openai_key = input("   OpenAI API Key (required): ").strip()
    if not openai_key:
        print("❌ OpenAI API Key is required!")
        return False

    print("\n3. Optional Settings:")
    max_words = input("   Max words per field (150): ").strip() or "150"
    debug_mode = input("   Debug mode (false): ").strip() or "false"

    # Create .env file
    env_content = f"""# AI Discussion Manager Configuration
# Auto-generated by setup.py

# Database Configuration
DB_HOST={db_host}
DB_USER={db_user}
DB_PASSWORD={db_password}
DB_NAME={db_name}
DB_PORT={db_port}

# OpenAI Configuration
OPENAI_API_KEY={openai_key}

# Optional Settings
MAX_WORD_LIMIT={max_words}
DEFAULT_DISCUSSION_ROUNDS=5
DEBUG_MODE={debug_mode}
"""

    try:
        with open('.env', 'w') as f:
            f.write(env_content)
        print("✅ .env file created successfully!")
        return True
    except Exception as e:
        print(f"❌ Error creating .env file: {e}")
        return False

def test_configuration():
    """Test the configuration by loading environment variables"""
    print("\n🧪 Testing Configuration...")

    # Load environment variables
    load_dotenv()

    # Check required variables
    required_vars = ['OPENAI_API_KEY']
    missing = []

    for var in required_vars:
        if not os.getenv(var):
            missing.append(var)

    if missing:
        print(f"❌ Missing required variables: {', '.join(missing)}")
        return False

    # Check optional variables
    optional_vars = ['DB_HOST', 'DB_USER', 'DB_PASSWORD', 'DB_NAME']
    found = []

    for var in optional_vars:
        if os.getenv(var):
            found.append(var)

    if found:
        print(f"✅ Found optional variables: {', '.join(found)}")

    print("✅ Configuration test passed!")
    return True

def main():
    """Main setup function"""
    try:
        # Create .env file
        if not create_env_file():
            print("❌ Setup failed!")
            sys.exit(1)

        # Test configuration
        if not test_configuration():
            print("❌ Configuration test failed!")
            sys.exit(1)

        print("\n🎉 Setup completed successfully!")
        print("\n📋 Next steps:")
        print("1. Install dependencies: pip install -r requirements.txt")
        print("2. Setup database: python setup_database.py")
        print("3. Run application: streamlit run main.py")
        print("\n🚀 Your AI Discussion Manager is ready to use!")

    except KeyboardInterrupt:
        print("\n\n⚠️  Setup cancelled by user.")
        sys.exit(0)
    except Exception as e:
        print(f"\n❌ Setup error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
